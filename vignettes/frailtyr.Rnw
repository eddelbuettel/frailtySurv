% \documentclass[nojss]{jss}
\documentclass[article]{jss}
%% \usepackage{thumbpdf} %% TODO: Causes a problem on OS X?

% Some of these are redundent
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{color, pdfcolmk}
\usepackage{Sweave}

%% Symbols
% TODO: define new commands for commonly used symbols, equations

\author{John V. Monaco\\Pace University \And
        Malka Gorfine\\Tel Aviv University \And
        Li Hsu \\Fred Hutchinson \\Cancer Research Center}
\Plainauthor{John V. Monaco, Malka Gorfine, Li Hsu} %% comma-separated

\title{\pkg{frailtyr}: A General Semiparametric Shared Frailty Model}
\Plaintitle{frailtyr: A General Semiparametric Shared Frailty Model} %% without formatting
\Shorttitle{\pkg{frailtyr}}

\Abstract{
TODO
}

\Keywords{survival analysis, shared frailty model, \proglang{R}}
\Plainkeywords{survival analysis, shared frailty model, R}

%% TODO: publication information
%% \Volume{??}
%% \Issue{??}
%% \Month{??}
%% \Year{????}
%% \Submitdate{????-??-??}
%% \Acceptdate{????-??-??}

\Address{
  John V. Monaco\\
  Seidenberg School of Computer Science and Information Systems\\
  Pace University\\
  861 Bedford Road\\
  Pleasantville, NY 10570\\
  E-mail: \email{jmonaco@pace.edu}\\
  URL: \url{http://vmonaco.com}
  \\\\
  Malka Gorfine\\
  TODO: department?\\
  Tel Aviv University\\
  Address line 1\\
  Address line 2\\
  E-mail: \email{TODO}\\
  URL: \url{TODO}
  \\\\
  Li Hsu
  TODO: department?\\
  Fred Hutchinson Cancer Research Center\\
  Address line 1\\
  Address line 2\\
  E-mail: \email{TODO}\\
  URL: \url{TODO}
}

%% end of declarations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\sunderline}[1]{\smash{\underline{#1\mkern-4mu}\mkern4mu } }
\newcommand{\bvec}{\sunderline\beta }
\newcommand{\Zvec}{\sunderline Z}

\begin{document}
\SweaveOpts{concordance=FALSE,engine=R,eps=FALSE}
%\VignetteIndexEntry{A General Semiparametric Shared Frailty Model}
%\VignetteDepends{frailtyr}
%\VignetteKeywords{survival analysis, shared frailty model}
%\VignettePackage{frailtyr}

<<preliminaries,echo=FALSE,results=hide>>=
options(prompt = "R> ", continue = "+   ")
@

\section{Introduction}

Based on \cite{gorfine2006prospective}. Background, motivation, survival
packages.

\begin{table}[h]
\protect\caption{R functions for fitting survival models. P=parametric, NP=nonparametric,
PPL=partial penalized likelihood, MML=maximum marginal likelihood,
DLs=downloads.\label{tab:survival-analysis-functions}}


\centering{}%
\begin{tabular}{|c|c|c|c|c|c|}
\hline 
Package::function & $\lambda_{0}$ & Estimation & Gen? & Frailty distr & Weekly DLs\tabularnewline
\hline 
\hline 
survival::coxph & NP & PPL & No & $\Gamma$, $LN$, $LT$ & 2003.1\tabularnewline
\hline 
coxme::coxme & NP & PPL & No & $LN$ & 167.4\tabularnewline
\hline 
frailtypack::frailtyPenal & P or NP & PPL & No & $\Gamma$, $LN$, & 80.3\tabularnewline
\hline 
phmm::phmm & NP & EM & No & $LN$, & 46\tabularnewline
\hline 
parfm::parfm & P & MML & No & $\Gamma$, $PS$, $IG$ & 45.9\tabularnewline
\hline 
survBayes::survBayes & NP & Bayes & No & $\Gamma$, $LN$ & 35.7\tabularnewline
\hline 
\end{tabular}
\end{table}


Additional: survMisc, survsim, MST.


\section{Data generation}

Data can be generated under a wide variety of conditions to simulate
survival times. The genfrail function in frailtyr is used to generate
survival times from a shared frailty model. That is, we have survival
function

\begin{equation}
S(t|{\bf Z}_{ij},\omega_{i})=\exp\left\{ -\Lambda_{0}\left(t\right)\omega_{i}\exp({\bf \beta'}{\bf Z}_{ij})\right\} \label{eq:share-frailty-survival}
\end{equation}
where $t$ is time, $\omega_{i}$ is the frailty value for cluster
$i$, $\Lambda_{0}\left(t\right)$ is the unspecified cumulative baseline
hazard function, ${\bf \beta}$ is the coefficient vector, and ${\bf Z}_{ij}$
is the vector of covariates for member $j$ in cluster $i$. We let
$\omega\sim f({\bf \theta})$, where ${\bf \theta}$ is a parameter
vector for frailty distribution $f$, and $Z\sim U\left(0,1\right)$
or $Z\sim N\left(0,1\right)$. Covariates are draw from either a standard
normal or uniform distribution, as specified by the covariates parameter.


\subsection{Baseline hazard}

There are three ways the baseline hazard can be specified to generate
survival data: as the inverse cumulative baseline hazard $\Lambda_{0}^{-1}$,
the cumulative baseline hazard $\Lambda_{0}$, or the baseline hazard
$\lambda_{0}$. Due to Bender \cite{bender2005generating}, if the
cumulative baseline hazard function can be directly inverted, then
the failure times can solved directly by

\begin{equation}
T_{ij}^{0}=\Lambda_{0}^{-1}\left[-\ln\left(u\right)\exp\left(-\beta^{'}{\bf X}_{ij}\right)\right]\label{eq:survival-time-direct}
\end{equation}
where $u\sim U\left(0,1\right)$ and $T_{ij}^{0}$ is the failure
time for member $j$ in cluster $i$. Consequently, if $\Lambda_{0}^{-1}$
is provided, then survival times are determined by Equation (\ref{eq:survival-time-direct}). 

When $\Lambda_{0}$ cannot be inverted, we must solve the following
equation for $t$ to determine failure time $T_{ij}^{0}$, 
\[
S\left(t|{\bf Z}_{ij},\omega_{i}\right)-u=0
\]
using a univariate root-finding algorithm as described in \cite{crowther2013simulating}.
Alternatively, we may take the logarithm and solve 
\begin{equation}
-\Lambda_{0}\left(t\right)\omega_{i}\exp({\bf \beta'}{\bf Z}_{ij})-\ln u=0\label{eq:survival-time-log-root}
\end{equation}
for greater numerical stability in the root-finding algorithm. genfrail
takes this approach when $\Lambda_{0}$ is provided and uses the R
function uniroot to solve Equation (\ref{eq:survival-time-log-root}),
which is based on Brent's algorithm \cite{brent2013algorithms}. The
resulting failure times take on values $[0,\infty)$ for $u\in(0,1]$.

If neither $\Lambda_{0}^{-1}$ or $\Lambda_{0}$ are provided to genfrail,
then the baseline hazard function $\lambda_{0}$ must be passed. In
this case, we have 
\[
\Lambda_{0}\left(t\right)=\int_{0}^{t}\lambda_{0}\left(s\right)ds
\]
which must be evaluated numerically. Using the numerical integrations,
Equation (\ref{eq:survival-time-log-root}) can be solved for $t$.
This approach is the most computationally expensive since it requires
numerical integration to be performed at each iteration in the root-finding
algorithm, but allows for generating data from arbitrary baseline
hazard functions. Section \ref{sub:datagen-examples} demonstrates
generating data using each method.


\subsection{Shared frailty}

\label{sub:datagen-shared-frailty}

Shared frailty values are generated for each cluster according to
the frailty distribution specified. Gamma variates are generating
using the R stats function rgamma, which relies on two different techniques
depending on whether $\theta>1$. For other distributions with Laplace
transforms, frailty values are generated using a modified Newton-Raphson
algorithm for numerical transform inversion\cite{ridout2009generating}.
This technique is used for the PVF and positive stable distributions.
Note that while frailtyr can generate survival data with a positive
stable frailty distribution, it cannot estimate parameters for this
model due to the positive stable having an infinite mean. Frailty
values from a log-normal distribution are generated in the usual way,
and inverse Gaussian variates are generated using a transformation
method in the statmod package \cite{statmod2015}. See Appendix \ref{sec:frailty-distributions}
for a full list of frailty distributions and parametrization.

For the gamma, log-normal, and inverse Gaussian, there is a positive
relationship between the distribution parameter $\theta$ and the
strength of dependence between cluster members. As $\theta$ increases,
inter-cluster differences decrease and intra-cluster differences increase.
The opposite is true for the PVF, and as $\alpha$ increases, the
dependence between cluster members decreases. All the supported frailty
distributions have degenerate cases, which are defined in Appendix
\ref{sec:frailty-distributions}. 

Figure \ref{fig:frailty-distributions} shows the densities for the
supported distributions, all with $0.7$ variance. The gamma and inverse
Gaussian have variance $\VAR\left[\omega\right]=\theta=0.7$, while
the PVF has $\VAR\left[\omega\right]=1-\alpha=0.7$ for $\alpha=0.3$.
For the log-normal $\VAR\left[\omega\right]=e^{\theta}\left(e^{\theta}-1\right)=0.7$
must be solved for $\theta$ to get $\theta\approx0.3884$.

\begin{figure}
\begin{center}
<<label=frailty-distributions,fig=TRUE,echo=FALSE,height=4,width=6>>=
library(frailtyr)
labels <- c("Gamma", "Log-normal", "Inv-Gaussian", "PVF")
x <- seq(0, 10, length.out=100)
variance <- 0.7
theta.gamma <- variance
# Determine theta for lognormal by solving the variance
theta.lognormal <- uniroot(function(p) variance - exp(p)*(exp(p) - 1), c(0, 10))$root
theta.invgauss <- variance
theta.pvf <- 1 - variance
plot(x, dgamma_c(x, theta.gamma), type="l", lty=1, 
     xlab=expression(omega), ylab="Density", ylim=c(0,1))
lines(x, dlognormal_c(x, theta.lognormal), lty=2, col=2)
lines(x, dinvgauss_c(x, theta.invgauss), lty=3, col=3)
lines(x, dpvf_c(x, theta.pvf), lty=4, col=4)
legend("topright", inset=.05, title="Distribution", labels, lwd=2, lty=1:4, col=1:4)
@
\end{center}
\caption{Frailty distribution densities with $ \VAR[\omega] = \Sexpr{variance}$ . Gamma, Inv-Gaussian, and PVF have $ \E[\omega] = 1 $ and log-normal has $ \E[\omega] \approx 1.168. $}
\label{fig:frailty-distributions}
\end{figure}


\subsection{Cluster sizes}

\label{sub:datagen-cluster-size}

Depending on how a cluster is defined, the cluster sizes in a shared
frailty dataset will vary. For example, in the Diabetic Retinopathy
Study (DRS), two failure times are observed for each subject corresponding
to the left and right eye \cite{diabetic1976preliminary,huster1989modelling}.
Observations are clustered by subject, so every cluster has exactly
two members. If instead the observations were clustered by geographical
location, the cluster sizes would vary and perhaps follow a discrete
power law. genfrail is able to generate data with fixed or varying
cluster sizes.

Cluster sizes can be generated from a k-truncated Poisson \cite{aster2014},
where the expected cluster size is given by

\[
\E\left[K\right]=\frac{\lambda-e^{-\lambda}\sum_{j=1}^{l}\frac{\lambda^{j}}{\left(j-1\right)!}}{1-e^{-\lambda}\sum_{j=0}^{l}\frac{\lambda^{j}}{j!}}
\]
The typical case is with $l=0$ for a zero-truncated Poisson. If we
also have $\lambda=2$, then $\E[K]\approx2.313$. The parameters
for the k-truncated Poisson are c(l, lambda).

A discrete zeta distribution can also be used to generate cluster
sizes. Accurately fitting and generating from a discrete power-law
distribution is generally difficult \cite{clauset2009power}, and
genfrail uses a truncated Zeta distribution to avoid some of the pitfalls.
The density is given by

\[
f\left(K;s,u,l\right)=\frac{\left(K-l\right)^{-s}/\zeta\left(s\right)}{\sum_{j=1}^{u-l}j^{-s}/\zeta\left(s\right)}\quad s>1
\]
where $\zeta\left(s\right)$ is the Riemann zeta function, $s$ is
the scaling exponent, $l$ is the noninclusive lower bound, and $u$
is the inclusive upper bound. The resulting distribution has support
$K\in\left\{ l+1,\dots,u\right\} $. With $s\gg1$, large enough $u$,
the distribution behaves similar to the zeta distribution, where $\E\left[K\right]=\frac{1}{\zeta\left(s\right)}\sum_{j=1}^{\infty}\frac{1}{j^{s-1}}$.

Finally, a discrete uniform distribution can be specified by passing
K = ``duniform'' to genfrail. The respective parameters are c(l,
u), where $l$ is the noninclusive lower bound and $u$ is the inclusive
upper bound. Similar to the truncated zeta, $K\in\left\{ l+1,\dots,u\right\} $
and cluster sizes will be selected from this set. Since the lower
bound is noninclusive, $\E\left[K\right]=\frac{1+l+u}{2}$.

The cluster sizes may also be specified by the user. In this case,
a vector of the desired cluster sizes should be passed as parameter
$K$. In this case, $N$ is ignored with a warning.


\subsection{Censoring}

\label{sub:datagen-censoring}

The observed follow-up times and failure indicators are determined
by right-censoring the failure times. Let the observed follow-up time
for member $j$ in cluster $i$ be given by

\[
T_{ij}=\min\left(T_{ij}^{0},C_{ij}\right)
\]
where $C_{ij}$ is the censoring time. The failure indicator is given
by

\[
\delta_{ij}=I\left(T_{ij}^{0}\le C_{ij}\right)
\]
The censoring distribution is specified through the parameters censoring.distr
and censoring.param for the distribution name and parameter vector,
respectfully. A normal distribution is used by default.

Sometimes, a particular censoring rate is desired. Typically, the
censoring distribution parameters are varied to obtain a desired censoring
rate. genfrail can avoid this effort on behalf of the user by letting
the desired censoring rate be specified instead. In this case, the
appropriate parameters for the censoring distribution are determined
to achieve the desired censoring rate, given the generated failure
times.

Let $\dot{F}\left(t\right)$ be the empirical cumulative distribution
of failure times. With a normal censoring distribution, the expected
censoring rate is
\[
C\left(\mu\right)=\int_{0}^{\infty}\mathcal{N}\left(t;\mu,\sigma^{2}\right)F\left(t\right)dt
\]
where $C\left(\mu\right)$ is the empirical censoring rate as a function
of $\mu$. To obtain a particular censoring rate $r$, we must solve
the equation
\[
r-C\left(\mu\right)=0
\]
for $\mu$. The censoring variance $\sigma^{2}$ must be specified
for the problem to be identifiable. Solving for $\mu$ will give the
censoring distribution with expected censoring rate $r$ for the data
generated. Thus, this method works with any empirical distribution
of failure times. genfrail uses this method to achieve a desired censoring
rate with either normal or log-normal censoring distributions.


\subsection{Rounding}

\label{sub:datagen-rounding}

The observed times may optionally be rounded to the nearest multiple
of $B$ by
\[
\dot{T}_{ij}=B\Biggl\lfloor\frac{T_{ij}}{B}+0.5\Biggr\rfloor
\]
This has the effect of simulating multiple observations (and thus,
multiple failures depending on the failure indicator) at a given time
step when there are many subjects and a course-grained measurement
of time. If $B=1$, the observed times are simply rounded to the nearest
integer.


\subsection{Examples}

\label{sub:datagen-examples}

Generating survival data from a model with known parameters.

simdata <- genfrail(N=300, K=2, beta=log(2), frailty="gamma", theta=2)

\[
S(t|{\bf Z},\omega)=\exp\left\{ -\omega\exp({\bf \beta'}{\bf Z})(0.01t)^{4.6}\right\} 
\]
\begin{equation}
\lambda_{0}\left(t\right)=\left\{ \tau\left(Ct\right)^{\tau}\right\} t^{-1}\label{eq:hazard-typical}
\end{equation}


Oscillating BH:
\begin{equation}
\lambda_{0}\left(t\right)=A^{sin\left(f\pi t\right)}\left\{ \tau\left(Ct\right)^{\tau}\right\} t^{-1}\label{eq:hazard-oscillate}
\end{equation}


The baseline hazard can be verified by passing a zero covariate coefficient
and no censoring. In this case, the empirical failure rate should
reflect the baseline hazard.


\section{Model estimation}

\[
\ell=\sum_{i=1}^{n}\sum_{j=1}^{m_{i}}\delta_{ij}\log e^{\sunderline\beta^{T}\sunderline Z_{ij}}+\sum_{i=1}^{n}\log\mathcal{L}^{\left(m_{i}\right)}\left(H_{i.}\left(\tau\right)\right)
\]


\begin{eqnarray*}
\sunderline U_{\bvec}=\frac{\partial}{\partial\bvec}\ell & = & \sum_{i=1}^{n}\left[\sum_{j=1}^{m_{i}}\delta_{ij}\Zvec_{ij}+\frac{\frac{\partial}{\partial\bvec}H_{i.}\left(\tau\right)\frac{\partial}{\partial H_{i.}\left(\tau\right)}\mathcal{L}^{\left(m_{i}\right)}\left(H_{i.}\left(\tau\right)\right)}{\mathcal{L}^{\left(m_{i}\right)}\left(H_{i.}\left(\tau\right)\right)}\right]\\
 & = & \sum_{i=1}^{n}\left[\sum_{j=1}^{m_{i}}\delta_{ij}\Zvec_{ij}+\sum_{j=1}^{m_{i}}H_{ij}\left(T_{ij}\right)\Zvec_{ij}\frac{\mathcal{L}^{\left(m_{i}+1\right)}\left(H_{i.}\left(\tau\right)\right)}{\mathcal{L}^{\left(m_{i}\right)}\left(H_{i.}\left(\tau\right)\right)}\right]
\end{eqnarray*}


\[
U_{\theta}=\frac{\partial}{\partial\theta}\ell=\sum_{i=1}^{n}\frac{\frac{\partial}{\partial\theta}\mathcal{L}^{\left(m_{i}\right)}\left(H_{i.}\left(\tau\right)\right)}{\mathcal{L}^{\left(m_{i}\right)}\left(H_{i.}\left(\tau\right)\right)}
\]


Maximize likelihood vs score equations

Likelihood

\begin{equation}
L=\prod_{i=1}^{n}\prod_{j=1}^{m_{i}}\left\{ \lambda_{0}\left(T_{ij}\right)\exp\left(\beta^{T}Z_{ij}\right)\right\} ^{\delta_{ij}}\prod_{i=1}^{n}\int\omega^{N_{i.}\left(\tau\right)+1}\exp\left\{ -\omega H_{i.}\left(\tau\right)\right\} f\left(\omega\right)d\omega\label{eq:likelihood}
\end{equation}


Loglikelihood

\begin{equation}
l=\sum_{i=1}^{n}\sum_{j=1}^{m_{i}}\delta_{ij}\log\left\{ \lambda_{0}\left(T_{ij}\right)\exp\left(\beta^{T}Z_{ij}\right)\right\} +\sum_{i=1}^{n}\log\left[\int\omega^{N_{i.}\left(\tau\right)+1}\exp\left\{ -\omega H_{i.}\left(\tau\right)\right\} f\left(\omega\right)d\omega\right]\label{eq:loglikelihood}
\end{equation}


Coefficient score

\[
U_{r}=\frac{1}{n}\sum_{i=1}^{n}\sum_{j=1}^{m_{i}}\delta_{ij}Z_{ijr}-\frac{1}{n}\sum_{i=1}^{n}\frac{\left\{ \sum_{j=1}^{m_{i}}H_{ij}\left(T_{ij}\right)Z_{ijr}\right\} \int\omega^{N_{i.}\left(\tau\right)+1}\exp\left\{ -\omega H_{i.}\left(\tau\right)\right\} f\left(\omega\right)d\omega}{\int\omega^{N_{i.}\left(\tau\right)}\exp\left\{ -\omega H_{i.}\left(\tau\right)\right\} f\left(\omega\right)d\omega}
\]


Coefficient score, using psi?

\[
U_{r}=\frac{1}{n}\sum_{i=1}^{n}\sum_{j=1}^{m_{i}}\delta_{ij}Z_{ijr}-\frac{1}{n}\sum_{i=1}^{n}\left\{ \sum_{j=1}^{m_{i}}H_{ij}\left(T_{ij}\right)Z_{ijr}\right\} \psi_{i}\left(\gamma,\Lambda,\tau\right)
\]


Frailty parameter score

\[
U_{p+1}=\frac{1}{n}\sum_{i=1}^{n}\frac{\int\omega^{N_{i.}\left(\tau\right)}\exp\left\{ -\omega H_{i.}\left(\tau\right)\right\} f'\left(\omega\right)d\omega}{\int\omega^{N_{i.}\left(\tau\right)}\exp\left\{ -\omega H_{i.}\left(\tau\right)\right\} f\left(\omega\right)d\omega}
\]


Baseline hazard estimation

\[
\psi_{i}\left(\gamma,\Lambda,t\right)=\phi_{2i}\left(\gamma,\Lambda,t\right)/\phi_{1i}\left(\gamma,\Lambda,t\right)
\]


\[
\phi_{ki}\left(\gamma,\Lambda_{0},t\right)=\int\omega^{N_{i.}\left(\tau\right)+\left(k-1\right)}\exp\left\{ -\omega H_{i.}\left(\tau\right)\right\} f\left(\omega\right)d\omega\quad1\le k\le4
\]


Likelihood and score functions are function of
\[
H_{i.}\left(\tau\right)=\sum_{i=1}^{m_{i}}\Lambda_{0}\left(T_{ij}\right)\exp\left(\beta^{T}Z_{ij}\right)
\]


\[
H_{i.}\left(\tau_{k-1}\right)=\sum_{i=1}^{m_{i}}\Lambda_{0}\left\{ \min\left(T_{ij},\tau_{k-1}\right)\right\} \exp\left(\beta^{T}Z_{ij}\right)
\]


TODO:

LT to solve integrals

Performance remarks

fitfrail arguments, return value

Analytic and empirical asymptotic results.

Correlation with existing packages for gamma, log-normal frailty.


\section{Example}

Example generating data and fitting model, displaying and interpreting
results


\section{Case study}

TODO: Application to DRS data, maybe HD failure?


\section{Discussion}

TODO

\bibliography{frailtyr}


\appendix

\section{Frailty distributions}

\label{sec:frailty-distributions}

All frailty distributions have support $\omega\in\left(0,\infty\right)$.
It is usually necessary to place constraints on the parameters to
avoid identifiability problems.

TODO: For each frailty distribution: density, Laplace transform, method
to generate random samples


\subsection{Gamma}

Frailty values from a gamma distribution are denoted by $\omega\sim\Gamma(\frac{1}{\theta},\frac{1}{\theta})$,
where $E[\omega]=1$ and $Var[\omega]=\theta$. The frailtyr package
uses a one-parameter gamma distribution with shape and scale both
$\frac{1}{\theta}$ and density given by

\begin{equation}
\Gamma(\omega;\theta)=\frac{\omega^{\frac{1}{\theta}-1}\exp\left(\frac{-\omega}{\theta}\right)}{\theta^{\frac{1}{\theta}}\Gamma(\frac{1}{\theta})}\label{eq:density-gamma}
\end{equation}
The special case when $\theta=0$ is taken to be a degenerate distribution
where $\omega=1$, i.e. there is no hidden frailty in the hazard function.
The partial derivative, with respect to the single parameter $\theta$,
has closed form solution

\begin{equation}
\frac{\partial\Gamma(\omega;\theta)}{\partial\theta}=\frac{\left(\frac{\omega}{\theta}\right)^{\frac{1}{\theta}-1}\exp\left(\frac{-\omega}{\theta}\right)\left\{ \ln\left(\frac{\theta}{\omega}\right)+\psi^{(0)}\left(\frac{1}{\theta}\right)+\omega-1\right\} }{\theta^{3}\Gamma\left(\frac{1}{\theta}\right)}\label{eq:deriv-gamma}
\end{equation}


LT gamma

\[
L^{\left(p\right)}\left(s\right)=\left(-1\right)^{p}\theta^{-\frac{1}{\theta}}\left(\theta^{-1}+s\right)^{-\left(\frac{1}{\theta}+p\right)}\Gamma\left(\theta^{-1}+p\right)/\Gamma\left(\theta^{-1}\right)
\]



\subsection{Log-normal}

Frailty values from a log-normal distribution are denoted $\omega\sim LN(\theta)$,
where the log-mean and log-variance of $\omega$ are 0 and $\theta$,
respectively. This distribution has $E[\omega]=\exp\frac{\theta}{2}$
and $Var[\omega]=\exp2\theta-\exp\theta$, with density given by

\begin{equation}
LN(\omega;\theta)=\frac{1}{\omega\sqrt{\theta2\pi}}\exp\left\{ \frac{-\left(\ln\omega\right)^{2}}{2\theta}\right\} \label{eq:density-log-norm}
\end{equation}
Similar to the gamma distribution, the special case of $\theta=0$
indicates $\omega=1$. The partial derivative with respect to $\theta$
is given by

\begin{equation}
\frac{\partial LN(\omega;\theta)}{\partial\theta}=\frac{\ln^{2}\left(\omega\right)\exp\left(\frac{-\ln^{2}\omega}{2\theta}\right)}{2\sqrt{2\pi}\theta^{5/2}\omega}-\frac{\exp\left(\frac{-\ln^{2}\omega}{2\theta}\right)}{2\sqrt{2\pi}\theta^{3/2}\omega}\label{eq:deriv-log-norm}
\end{equation}



\subsection{Inverse Gaussian}

Frailty values from an inverse Gaussian distribution are denoted by
$\omega\sim IG(\theta)$, where $\frac{1}{\theta}$ is the scale and
the mean is fixed at 1. The density is given by

\begin{equation}
IG\left(\omega;\theta\right)=\left(2\pi\theta\omega^{3}\right)^{-1/2}\exp\left\{ \frac{-\left(\omega-1\right)^{2}}{2\theta\omega}\right\} \label{eq:density-inverse-gaussian}
\end{equation}
where $\theta>0$. The IG has $E[\omega]=1$ and $Var[\omega]=\theta$.
Similar to the gamma and log-normal, $\omega$ is taken to be 1 when
$\theta=0$. The derivative wrt. $\theta$ is given by 
\[
\frac{\partial IG\left(\omega;\theta\right)}{\partial\theta}=\frac{\left(\omega-1\right)^{2}\exp\left\{ -\frac{\left(\omega-1\right){}^{2}}{2\theta\omega}\right\} }{2\sqrt{2\pi}\theta^{2}\omega\sqrt{\theta\omega^{3}}}-\frac{\omega^{3}\exp\left\{ -\frac{\left(\omega-1\right)^{2}}{2\theta\omega}\right\} }{2\sqrt{2\pi}\left(\theta\omega^{3}\right){}^{3/2}}
\]



\subsection{Positive stable}

The one-parameter positive stable distribution is given by $\omega\sim PS(\alpha)$,
where $\beta=1$, $\mu=0$, $0<\alpha<1$, and $\delta=\alpha$ as
defined in Hougaard \cite{hougaard2000analysis}. The density is given
by

\begin{equation}
PS\left(\omega;\alpha\right)=-\frac{1}{\pi\omega}\sum_{k=1}^{\infty}\frac{\Gamma\left(k\alpha+1\right)}{k!}\left(-\omega^{-\alpha}\right)^{k}\sin\left(\alpha k\pi\right)\label{eq:density-posstab}
\end{equation}
When $\alpha=1$, a degenerate distribution at 1 is obtained and there
is no shared frailty.


\subsection{Power variance function}

The power variance function (PVF) distribution is denoted $PVF(\alpha,\delta,\theta)$
with density

\[
PVF\left(\omega;\alpha,\delta,\theta\right)=\exp\left(-\theta\omega+\frac{\delta^{\alpha}}{\alpha}\right)\frac{1}{\pi}\sum_{k=1}^{\infty}\frac{\Gamma\left(k\alpha+1\right)}{k!}\left(-\frac{1}{\omega}\right)^{\alpha k+1}\sin\left(\alpha k\pi\right)
\]
where $0<\alpha\le1,\theta\ge0,\delta>0$. To avoid identifiability
problems, we let $\delta=\theta=1$ as in \cite{hanagal2009modeling},
and get the one-parameter PVF density

\begin{equation}
PVF\left(\omega;\alpha\right)=\exp\left(-\omega+\alpha^{-1}\right)\frac{1}{\pi}\sum_{k=1}^{\infty}\frac{\Gamma\left(k\alpha+1\right)}{k!}\left(-\frac{1}{\omega}\right)^{\alpha k+1}\sin\left(\alpha k\pi\right)\label{eq:density-pvf}
\end{equation}
When $\alpha=1$, the degenerate distribution with $\omega=1$ is
obtained. The PVF has $E[\omega]=1$ and $Var[\omega]=\left(1-\alpha\right)$.

Laplace transform

\begin{equation}
L\left(s\right)=\exp\left[-\left\{ \left(1+s\right)^{\alpha}-1\right\} /\alpha\right]\label{eq:lt-pvf}
\end{equation}


LT derivs

\begin{equation}
L^{\left(m\right)}\left(s\right)=\left(-1\right)^{m}L\left(s\right)\sum_{j=1}^{m}c_{m,j}\left(\alpha\right)\left(1+s\right)^{j\alpha-m}\label{eq:lt-pvf-deriv}
\end{equation}


LT deriv wrt alpha

\begin{equation}
\frac{\partial L\left(s\right)}{\partial\alpha}=\exp\left\{ \frac{1-\left(s+1\right)^{\alpha}}{\alpha}\right\} \left\{ -\frac{1-\left(s+1\right)^{\alpha}}{\alpha^{2}}-\frac{\left(s+1\right)^{\alpha}\log\left(s+1\right)}{\alpha}\right\} \label{eq:lt-pvf-deriv-alpha}
\end{equation}


LT higher deriv wrt alpha

\begin{eqnarray}
c_{m,m}\left(\alpha\right) & = & 0\nonumber \\
c_{m,1}\left(\alpha\right) & = & \frac{\Gamma\left(m-\alpha\right)}{\Gamma\left(1-\alpha\right)}\nonumber \\
c_{m,j}\left(\alpha\right) & = & c_{m-1,j-1}\left(\alpha\right)+c_{m-1,j}\left(\alpha\right)\left\{ \left(m-1\right)-j\alpha\right\} \label{eq:pvf-lt-coef}
\end{eqnarray}


\begin{eqnarray}
\frac{\partial}{\partial\alpha}\mathcal{L}^{\left(m\right)}\left(s\right) & = & \frac{\partial}{\partial\alpha}\left[\left(-1\right)^{m}\mathcal{L}\left(s\right)\sum_{j=1}^{m}c_{m,j}\left(\alpha\right)\left(1+s\right)^{j\alpha-m}\right]\nonumber \\
 & = & \left(-1\right)^{m}\left\{ \frac{\partial}{\partial\alpha}\mathcal{L}\left(s\right)\right\} \sum_{j=1}^{m}c_{m,j}\left(\alpha\right)\left(1+s\right)^{j\alpha-m}\nonumber \\
 &  & +\left(-1\right)^{m}\mathcal{L}\left(s\right)\sum_{j=1}^{m}\Bigg\{\frac{\partial}{\partial\alpha}c_{m,j}\left(\alpha\right)\left(1+s\right)^{j\alpha-m}\nonumber \\
 &  & \qquad\qquad\qquad\qquad+c_{m,j}\left(\alpha\right)j\left(1+s\right)^{j\alpha-m}\ln\left(1+s\right)\Bigg\}\label{eq:pvf-lt-deriv}
\end{eqnarray}


\begin{eqnarray}
\frac{\partial}{\partial\alpha}c_{m,m}\left(\alpha\right) & = & 0\nonumber \\
\frac{\partial}{\partial\alpha}c_{m,1}\left(\alpha\right) & = & \frac{\Gamma\left(m-\alpha\right)\left\{ \psi^{\left(0\right)}\left(1-\alpha\right)-\psi^{\left(0\right)}\left(m-\alpha\right)\right\} }{\Gamma\left(1-\alpha\right)}\nonumber \\
\frac{\partial}{\partial\alpha}c_{m,j}\left(\alpha\right) & = & \frac{\partial}{\partial\alpha}c_{m-1,j-1}\left(\alpha\right)+\frac{\partial}{\partial\alpha}c_{m-1,j}\left(\alpha\right)\left\{ \left(m-1\right)-j\alpha\right\} -jc_{m-1,j}\left(\alpha\right)\label{eq:pvf-lt-deriv-coef}
\end{eqnarray}



\section{Simulation results}

TODO

\end{document}
